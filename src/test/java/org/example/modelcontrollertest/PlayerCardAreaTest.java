package org.example.modelcontrollertest;

import junit.framework.TestCase;
import org.example.controller.Player;
import org.example.exception.InvalidCardException;
import org.example.exception.PlaceholderNotValid;
import org.example.model.Model;
import org.example.model.deck.*;
import org.example.model.playarea.*;
import org.example.enumeration.*;
import org.json.simple.parser.ParseException;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class PlayerCardAreaTest extends TestCase {
    public void testUpdateCounter() {
        PlayerCardArea playerCardArea = new PlayerCardArea();
        Counter counter = playerCardArea.getCounter();
        Corner c1 = new Corner(Position.BOTTOML, PropertiesCorner.QUILL);
        Corner c2 = new Corner(Position.TOPL, PropertiesCorner.PLANT);
        Corner c3 = new Corner(Position.BOTTOMR, PropertiesCorner.MANUSCRIPT);
        Corner c4 = new Corner(Position.TOPR, PropertiesCorner.FUNGI);
        List<Corner> front = new ArrayList<>();
        List<Corner> back = new ArrayList<>(Arrays.asList(c1, c2, c3, c4));
        SideCard side = new SideCard(Side.BACK, front, back);
        Card c = new Card(1, Type.RESOURCES, CardRes.ANIMAL, null, null, null, null, null, side);
        playerCardArea.updateCounter(c);
        assertEquals(1,counter.getQuillCounter());
        assertEquals(1,counter.getPlantCounter());
        assertEquals(1, counter.getAnimalCounter());
        assertEquals(1,counter.getFungiCounter());
        assertEquals(1, counter.getManuscriptCounter());

        CardRes[] requireGold = {CardRes.INSECT, CardRes.ANIMAL};
        Corner c5 = new Corner(Position.BOTTOML, PropertiesCorner.HIDDEN);
        Corner c6 = new Corner(Position.TOPL, PropertiesCorner.HIDDEN);
        Corner c7 = new Corner(Position.BOTTOMR, PropertiesCorner.HIDDEN);
        Corner c8 = new Corner(Position.TOPR, PropertiesCorner.HIDDEN);
        List<Corner> front2 = new ArrayList<>(Arrays.asList(c5, c6, c7, c8));
        List<Corner> back2 = new ArrayList<>();
        SideCard side2 = new SideCard(Side.FRONT, front2, back2);
        Card sc = new Card(2, Type.STARTER, null, requireGold, null, null, null, null, side2);
        playerCardArea.updateCounter(sc);
        assertEquals(1, counter.getInsectCounter());
        assertEquals(2, counter.getAnimalCounter());
    }

    public void testUpdatePoints(){
        PlayerCardArea playerCardArea = new PlayerCardArea();
        Counter counter = playerCardArea.getCounter();
        Card c1 = new Card(1, Type.RESOURCES, null, null, 1, null, null, null, null);
        Card c2 = new Card(2, Type.GOLD, null, null, 1, GoldenPoint.NULL, null, null, null);
        Card c3 = new Card(3, Type.GOLD, null, null, 1, GoldenPoint.CORNER, null, null, null);
        Card c4 = new Card(4, Type.GOLD, null, null, 1, GoldenPoint.MANUSCRIPT, null, null, null);
        Card c5 = new Card(5, Type.GOLD, null, null, 1, GoldenPoint.INKWELL, null, null, null);
        Card c6 = new Card(6, Type.GOLD, null, null, 1, GoldenPoint.QUILL, null, null, null);
        counter.addResource(PropertiesCorner.QUILL);
        counter.addResource(PropertiesCorner.INKWELL);
        counter.addResource(PropertiesCorner.MANUSCRIPT);
        playerCardArea.updatePoints(c1);
        assertEquals(1, counter.getPointCounter());
        playerCardArea.updatePoints(c2);
        assertEquals(2, counter.getPointCounter());
        c3.setCoveredCornerByCard(2);
        playerCardArea.updatePoints(c3);
        assertEquals(4, counter.getPointCounter());
        playerCardArea.updatePoints(c4);
        assertEquals(5, counter.getPointCounter());
        playerCardArea.updatePoints(c5);
        assertEquals(6, counter.getPointCounter());
        playerCardArea.updatePoints(c6);
        assertEquals(7, counter.getPointCounter());
    }

    public void testCheckGold(){
        PlayerCardArea playerCardArea = new PlayerCardArea();
        Counter counter = playerCardArea.getCounter();
        CardRes[] requireGold = {CardRes.INSECT, CardRes.ANIMAL};
        Card c = new Card(1, Type.GOLD, null, requireGold, null, null, null, null, null);
        counter.addResource(PropertiesCorner.ANIMAL);
        assertTrue(playerCardArea.checkPlayForGold(c));
        counter.addResource(PropertiesCorner.INSECT);
        assertFalse(playerCardArea.checkPlayForGold(c));
    }

    public void testFungiDiagPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Westside_Gunn");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(3);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        Card card4 = deckObj.getCards().get(0);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(1);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,4,4);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testPlantDiagPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Freddie_Gibbs");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(13);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(14);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        Card card4 = deckObj.getCards().get(1);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(11);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,4,4);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testInsectDiagPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Nas");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(23);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(24);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        Card card4 = deckObj.getCards().get(2);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(21);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,4,4);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testAnimalDiagPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Busta_Rhymes");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(33);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(34);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        Card card4 = deckObj.getCards().get(3);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(31);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,4,4);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testFungiResPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Jay-z");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(3);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, -1,1);
        Card card4 = deckObj.getCards().get(8);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(1);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 2,-1,-1);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testPlantResPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Lauryn_Hill");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(13);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(14);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, -1,1);
        Card card4 = deckObj.getCards().get(9);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(11);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 2,-1,-1);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testAnimalResPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Andrè_3000");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(23);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(24);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, -1,1);
        Card card4 = deckObj.getCards().get(10);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(21);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 2,-1,-1);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testInsectResPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Kanye_West");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(33);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(34);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, -1,1);
        Card card4 = deckObj.getCards().get(11);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(31);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 2,-1,-1);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testMixPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Ty_Dolla_$ign");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 1,-1);
        player1.play(model, 0, 1, -1,1);
        Card card4 = deckObj.getCards().get(12);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(14);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,-1,-1);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testManuscriptResPrvateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Thugger");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 1,-1);
        player1.play(model, 0, 1, -1,1);
        Card card4 = deckObj.getCards().get(13);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,-1,-1);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testInkwellResPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Gunna");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 1,-1);
        player1.play(model, 0, 1, -1,1);
        Card card4 = deckObj.getCards().get(14);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,-1,-1);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testQuillResPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Future");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 1,-1);
        player1.play(model, 0, 1, -1,1);
        Card card4 = deckObj.getCards().get(15);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        Card card5 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,-1,-1);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testRedGreenPrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Kendrick_Lamar");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(1);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 2,-2);
        Card card4 = deckObj.getCards().get(4);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testGreenPurplePrivateObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Tupac");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(11);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 0,-2);
        Card card4 = deckObj.getCards().get(5);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testBlueRedPrivateObjective() throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Biggie");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(21);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 2,2);
        Card card4 = deckObj.getCards().get(6);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testPurpleBluePrivateObjective() throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Don_Toliver");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(31);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 0,2);
        Card card4 = deckObj.getCards().get(7);
        model.getPlayerCardArea(player1).setSecretObjective(card4);
        model.getPlayerCardArea(player1).privateObjective();
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testFungiDiagPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Metro_Grooming");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(3);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        Card card4 = deckObj.getCards().get(0);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(1);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,4,4);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testPlantDiagPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Rick_Ross");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(13);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(14);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        Card card4 = deckObj.getCards().get(1);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(11);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,4,4);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testInsectDiagPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Mos_Def");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(23);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(24);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        Card card4 = deckObj.getCards().get(2);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(21);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,4,4);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testAnimalDiagPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Big_L");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(33);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(34);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        Card card4 = deckObj.getCards().get(3);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(31);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,4,4);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testFungiResPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Cheif_Keef");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(3);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, -1,1);
        Card card4 = deckObj.getCards().get(8);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(1);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 2,-1,-1);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testPlantResPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Rocky");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(13);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(14);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, -1,1);
        Card card4 = deckObj.getCards().get(9);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(11);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 2,-1,-1);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testAnimalResPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Tyler_the_Creator");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(23);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(24);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, -1,1);
        Card card4 = deckObj.getCards().get(10);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(21);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 2,-1,-1);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testInsectResPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("MF_Doom");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(33);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(34);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, -1,1);
        Card card4 = deckObj.getCards().get(11);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(31);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 2,-1,-1);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testMixPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Danny_Brown");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 1,-1);
        player1.play(model, 0, 1, -1,1);
        Card card4 = deckObj.getCards().get(12);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(14);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,-1,-1);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testManuscriptResPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Peggy");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 1,-1);
        player1.play(model, 0, 1, -1,1);
        Card card4 = deckObj.getCards().get(13);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(6);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,-1,-1);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testInkwellResPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Schoolboy_Q");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 1,-1);
        player1.play(model, 0, 1, -1,1);
        Card card4 = deckObj.getCards().get(14);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(5);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,-1,-1);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testQuillResPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Pusha_T");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 1,-1);
        player1.play(model, 0, 1, -1,1);
        Card card4 = deckObj.getCards().get(15);
        model.getPublicObjective().add(card4);
        Card card5 = deckRes.getCards().get(4);
        model.getPlayerCardArea(player1).getHand().add(card5);
        player1.play(model, 0, 1,-1,-1);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(2, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testRedGreenPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Joey_Bada$$");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(1);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 2,-2);
        Card card4 = deckObj.getCards().get(4);
        model.getPublicObjective().add(card4);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testGreenPurplePublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Snoop_Dogg");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(11);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 0,-2);
        Card card4 = deckObj.getCards().get(5);
        model.getPublicObjective().add(card4);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testBlueRedPublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Dr_Dre");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(21);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 2,2);
        Card card4 = deckObj.getCards().get(6);
        model.getPublicObjective().add(card4);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testPurpleBluePublicObjective () throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Ice_Cube");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(31);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 0,2);
        Card card4 = deckObj.getCards().get(7);
        model.getPublicObjective().add(card4);
        model.getPlayerCardArea(player1).publicObjective(model);
        assertEquals(3, model.getPlayerCardArea(player1).getCounter().getPointCounter());
        assertEquals(1, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
    }

    public void testFindDiagonal() throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckObj = new Deck(Type.OBJECT);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Eazy-E");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(33);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(34);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        List<PlaceHolder> placeHolderList = playerCardArea.getPlaceHolders();
        List<PlaceHolder> availableNodes = playerCardArea.getAvailableNodes();
        List<PlaceHolder> allNodes = playerCardArea.getAllNodes();
        List<PlaceHolder> alreadyUsed = playerCardArea.getAlreadyUsed();
        PlaceHolder node1 = new Node(card1, 1, 1, placeHolderList, availableNodes, allNodes);
        assertTrue(playerCardArea.findDiagonal(node1, alreadyUsed));
    }

    public void testSameType() throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("DJ_Yella");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(3);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(14);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 1, 1,1);
        player1.play(model, 0, 1, 2,2);
        player1.play(model, 0, 1, 3,3);
        List<PlaceHolder> placeHolderList = playerCardArea.getPlaceHolders();
        List<PlaceHolder> availableNodes = playerCardArea.getAvailableNodes();
        List<PlaceHolder> allNodes = playerCardArea.getAllNodes();
        PlaceHolder node1 = new Node(card1, 1, 1, placeHolderList, availableNodes, allNodes);
        PlaceHolder node2 = new Node(card2, 2, 2, placeHolderList, availableNodes, allNodes);
        PlaceHolder node3 = new Node(card3, 3, 3, placeHolderList, availableNodes, allNodes);
        assertTrue(playerCardArea.sameType(node1, node2));
        assertFalse(playerCardArea.sameType(node1, node3));
    }

    public void testFindRedGreen() throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("MC_Ren");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(1);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 2,-2);
        List<PlaceHolder> placeHolderList = playerCardArea.getPlaceHolders();
        List<PlaceHolder> availableNodes = playerCardArea.getAvailableNodes();
        List<PlaceHolder> allNodes = playerCardArea.getAllNodes();
        List<PlaceHolder> alreadyUsed = playerCardArea.getAlreadyUsed();
        PlaceHolder node1 = new Node(card1, 1, 1, placeHolderList, availableNodes, allNodes);
        assertTrue(playerCardArea.findRedGreen(node1, alreadyUsed));
    }

    public void testFindGreenPurple() throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Arabian_Prince");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(10);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(11);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 0,-2);
        List<PlaceHolder> placeHolderList = playerCardArea.getPlaceHolders();
        List<PlaceHolder> availableNodes = playerCardArea.getAvailableNodes();
        List<PlaceHolder> allNodes = playerCardArea.getAllNodes();
        List<PlaceHolder> alreadyUsed = playerCardArea.getAlreadyUsed();
        PlaceHolder node1 = new Node(card1, 1, 1, placeHolderList, availableNodes, allNodes);
        assertTrue(playerCardArea.findGreenPurple(node1, alreadyUsed));
    }

    public void testFindBlueRed() throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Talib_Kweli");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(21);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(0);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 2,2);
        List<PlaceHolder> placeHolderList = playerCardArea.getPlaceHolders();
        List<PlaceHolder> availableNodes = playerCardArea.getAvailableNodes();
        List<PlaceHolder> allNodes = playerCardArea.getAllNodes();
        List<PlaceHolder> alreadyUsed = playerCardArea.getAlreadyUsed();
        PlaceHolder node1 = new Node(card2, 1, -1, placeHolderList, availableNodes, allNodes);
        assertTrue(playerCardArea.findBlueRed(node1, alreadyUsed));
    }

    public void testFindPurpleBlue() throws IOException, ParseException, PlaceholderNotValid, InvalidCardException {
        Model model = new Model();
        Deck deckRes = new Deck(Type.RESOURCES);
        Deck deckStarter = new Deck(Type.STARTER);
        List<Player> playerslist=new ArrayList<>();
        model.setPlayersList(playerslist);
        Player player1 = new Player("Quavo");
        model.getPlayersList().add(player1);
        Card starter = deckStarter.getCards().get(0);
        starter.setSide(1);
        PlayerCardArea playerCardArea=new PlayerCardArea();
        playerCardArea.setCardStarter(starter);
        playerCardArea.setStarterNode();
        model.getGameArea().put(player1, playerCardArea);
        assertEquals(0, model.getPlayerCardArea(player1).getCounter().getObjectiveCounter());
        Card card1 = deckRes.getCards().get(30);
        model.getPlayerCardArea(player1).getHand().add(card1);
        Card card2 = deckRes.getCards().get(31);
        model.getPlayerCardArea(player1).getHand().add(card2);
        Card card3 = deckRes.getCards().get(20);
        model.getPlayerCardArea(player1).getHand().add(card3);
        player1.play(model, 0, 2, 1,1);
        player1.play(model, 0, 2, 1,-1);
        player1.play(model, 0, 2, 0,2);
        List<PlaceHolder> placeHolderList = playerCardArea.getPlaceHolders();
        List<PlaceHolder> availableNodes = playerCardArea.getAvailableNodes();
        List<PlaceHolder> allNodes = playerCardArea.getAllNodes();
        List<PlaceHolder> alreadyUsed = playerCardArea.getAlreadyUsed();
        PlaceHolder node1 = new Node(card1, 1, -1, placeHolderList, availableNodes, allNodes);
        assertTrue(playerCardArea.findPurpleBlue(node1, alreadyUsed));
    }

    public void testSetGet() throws IOException, ParseException {
        PlayerCardArea playerCardArea = new PlayerCardArea();
        List<Card> hand = playerCardArea.getHand();
        assertEquals(hand, playerCardArea.getHand());
        Counter counter = playerCardArea.getCounter();
        assertEquals(counter, playerCardArea.getCounter());
        PlaceHolder placeHolder = new PlaceHolder(1, 1);
        List<PlaceHolder> allNodes = playerCardArea.getAllNodes();
        allNodes.add(placeHolder);
        assertEquals(placeHolder, playerCardArea.getNodeByXY(1,1));
        assertEquals(allNodes, playerCardArea.getAllNodes());
        Card secretObj = playerCardArea.getSecretObjective();
        assertEquals(secretObj, playerCardArea.getSecretObjective());
        Card card = new Card();
        playerCardArea.setSecretObjective(card);
        assertEquals(card, playerCardArea.getSecretObjective());
        List<PlaceHolder> availableNodes = playerCardArea.getAvailableNodes();
        assertEquals(availableNodes, playerCardArea.getAvailableNodes());
        List<PlaceHolder> placeHolders = playerCardArea.getPlaceHolders();
        assertEquals(placeHolders, playerCardArea.getPlaceHolders());
        List<PlaceHolder> alreadyUsed = playerCardArea.getAlreadyUsed();
        assertEquals(alreadyUsed, playerCardArea.getAlreadyUsed());
    }
}
